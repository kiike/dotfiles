#!/usr/bin/env python
"""
Upload files with android-transfer-linux
"""

import argparse
import logging
import os
import subprocess
import shlex


def put_dir(dest_dir, directory, filename):
    aft_mtp_cli = subprocess.Popen('aft-mtp-cli', stdin=subprocess.PIPE,
                                   universal_newlines=True)

    cmd_queue = [
        'cd "{}"'.format(dest_dir),
        'cd "{}"'.format(directory),
        'put "{}/{}"'.format(directory, filename),
        'exit'
    ]

    logging.debug("[PUT] %s/%s",
                  directory, filename)

    aft_mtp_cli.communicate("\n".join(cmd_queue))

    return aft_mtp_cli.returncode


def put_file(dest_dir, filename):
    aft_mtp_cli = subprocess.Popen('aft-mtp-cli', stdin=subprocess.PIPE,
                                   universal_newlines=True)

    cmd_queue = [
        'cd "{}"'.format(dest_dir),
        'put "{}/{}"'.format(directory, filename),
        'exit'
    ]

    logging.debug(cmd_queue)

    logging.debug("[PUT] %s/%s",
                  dest_dir, filename)

    aft_mtp_cli.communicate("\n".join(cmd_queue))

    return aft_mtp_cli.returncode


def mkdir(dest_dir, directory):
    aft_mtp_cli = subprocess.Popen('aft-mtp-cli',
                                   stdin=subprocess.PIPE,
                                   universal_newlines=True)

    cmd_queue = [
        'cd "{}"'.format(dest_dir),
        'mkdir "{}"'.format(directory),
    ]

    logging.debug('[MKDIR] %s', directory)

    aft_mtp_cli.communicate("\n".join(cmd_queue))
    return aft_mtp_cli.returncode


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('dest_dir')
arg_parser.add_argument('sources', nargs='+')
args = arg_parser.parse_args()

logging.basicConfig(format='[%(levelname)s] %(message)s',
                    level=logging.DEBUG)

logging.debug("Settings\n\t- args.dest_dir: %s\n\t- args.sources: %s",
              args.dest_dir, args.sources)


for source in args.sources:
    # Strip trailing slashes
    source = source.rstrip('/')
    if os.path.isdir(source):
        mkdir(args.dest_dir, source)

        has_lossless = False
        for _, _, files in os.walk(source):
            for f in files:
                if f.endswith('.flac'):
                    has_lossless = True
                    break

        if has_lossless:
            out_dir = '/tmp/'
            cmd = ['whatmp3', '-n', '--V0', '-o', out_dir, source]
            transcoder = subprocess.check_output(cmd)

            transcoded = '{}{} (V0)'.format(out_dir, source)
            source = transcoded

        for root, dirs, files in os.walk(source):
            for f in files:
                retval = put_dir(args.dest_dir, source, f)
                if retval != 0:
                    break

        if has_lossless:
            os.rmdir(transcoded)
    else:
        put_file(args.dest_dir, source)
